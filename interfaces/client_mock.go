// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/client_interface.go
//
// Generated by this command:
//
//	mockgen -source=interfaces/client_interface.go -destination=interfaces/client_mock.go -package=interfaces
//

// Package interfaces is a generated GoMock package.
package interfaces

import (
	context "context"
	http "net/http"
	client "oapi-codegen-test/client"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
	isgomock struct{}
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// GetArtistList mocks base method.
func (m *MockClientInterface) GetArtistList(ctx context.Context, params *client.GetArtistListParams) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtistList", ctx, params)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtistList indicates an expected call of GetArtistList.
func (mr *MockClientInterfaceMockRecorder) GetArtistList(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtistList", reflect.TypeOf((*MockClientInterface)(nil).GetArtistList), ctx, params)
}
